// Generated by CoffeeScript 1.6.2
/*
* A view for displaying address search history
*/


(function() {
  define(['Underscore', 'Backpack', 'LocationItemView', 'text!template/HistoryView.html'], function(_, Backpack, LocationItemView, viewTemplate) {
    return Backpack.View.extend({
      template: _.template(viewTemplate),
      events: {
        'click #history-back-button': 'onBackButtonClicked',
        'click #history-edit-button': 'onEditButtonClicked',
        'click #history-done-button': 'onDoneButtonClicked'
      },
      /*
      * Sets up history view
      */

      initialize: function(options) {
        var collection, listView;

        Backpack.View.prototype.initialize.apply(this, arguments);
        this.render();
        collection = this.collection = new Backpack.Collection(null, {
          model: Backpack.Model,
          subscribers: {
            ADD_LOCATION_HISTORY: 'add'
          }
        });
        listView = this.listView = new Backpack.EditableListView({
          collection: collection,
          itemView: LocationItemView,
          itemOptions: {
            onClicked: function() {
              Backbone.trigger('SEARCH_ADDRESS', this.model.attributes.formatted_address);
              Backbone.trigger('SHOW_VIEW', 'searchView');
            }
          }
        });
        this.$('#history-list-container').append(listView.$el);
      },
      /*
      * Renders template HTML
      */

      render: function() {
        this.$el.html(this.template());
        return this;
      },
      /*
      * Toggles edit mode of this view
      * @param {Boolean} isEdit a flag to specify edit mode or not
      */

      setEditable: function(isEdit) {
        this.listView.setEditable(isEdit);
        this.$el.toggleClass('history-edit', isEdit);
      },
      /*
      * Click event handler for [Back] button
      * When clicked, it returns to search view
      */

      onBackButtonClicked: function() {
        this.setEditable(false);
      },
      /*
      * Click event handler for [Edit] button
      * When clicked, it enters edit mode
      */

      onEditButtonClicked: function() {
        this.setEditable(true);
      },
      /*
      * Click event handler for [Done] button
      * When clicked, it exits edit mode
      */

      onDoneButtonClicked: function() {
        this.setEditable(false);
      }
    });
  });

}).call(this);
