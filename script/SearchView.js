// Generated by CoffeeScript 1.6.2
/*
* A view to search for address
*/


(function() {
  define(['jQuery', 'Underscore', 'Backpack', 'LocationService', 'LocationItemView', 'text!template/SearchView.html'], function($, _, Backpack, LocationService, LocationItemView, viewTemplate) {
    var locationService;

    locationService = LocationService.getInstance();
    return Backpack.View.extend({
      template: _.template(viewTemplate),
      events: {
        'click #search-button': 'onSearchButtonClicked',
        'click #history-button': 'onHistoryButtonClicked'
      },
      subscribers: {
        SEARCH_ADDRESS: 'doSearch'
      },
      /*
      * Sets up main view
      */

      initialize: function(options) {
        var collection, searchListView;

        Backpack.View.prototype.initialize.apply(this, arguments);
        this.render();
        collection = this.collection = new Backpack.Collection(null, {
          model: Backpack.Model
        });
        searchListView = new Backpack.ListView({
          collection: collection,
          itemView: LocationItemView
        });
        this.$('#search-result-list').append(searchListView.$el);
        this.mapView = new Backpack.GoogleMapView({
          apiKey: 'AIzaSyDAJRmpbhxdAaoSYj2_iwaMEGxuxBR3YoM',
          subscribers: {
            INIT_GOOGLE_MAP: 'initMap',
            GOOGLE_MAP_SCRIPT_LOADED: '_onScriptLoaded'
          }
        });
        this.$('#map-container').append(this.mapView.$el);
      },
      /*
      * Renders template HTML
      */

      render: function() {
        this.$el.html(this.template());
        return this;
      },
      /*
      * Click event handler for [Search] button
      */

      onSearchButtonClicked: function() {
        var _this = this;

        this.doSearch(this.$('#address-input').val(), function() {
          Backbone.trigger('ADD_LOCATION_HISTORY', _this.collection.models, {
            at: 0
          });
        });
      },
      /*
      * Makes API calls to get current location and search for a given address
      * @param {String} address an address to search for
      * @param {Function} callback a callback function that gets called if both API call completes
      */

      doSearch: function(address, callback) {
        var getCurrentLocation, search,
          _this = this;

        this.setLoading(true);
        this.$('#address-input').val(address);
        getCurrentLocation = function() {
          var dfd,
            _this = this;

          dfd = $.Deferred();
          locationService.getCurrentLocation({
            success: function(pos) {
              console.log("current position: " + JSON.stringify(pos));
              dfd.resolve({
                lat: pos.coords.latitude,
                lng: pos.coords.longitude
              });
            },
            failure: function(error) {
              _this.setLoading(false);
              console.log('current location error: ' + error);
              dfd.reject();
            }
          });
          return dfd.promise();
        };
        search = function() {
          var dfd,
            _this = this;

          dfd = $.Deferred();
          locationService.search(address, {
            success: function(data) {
              console.log("search result: " + JSON.stringify(data));
              dfd.resolve(data.results[0]);
            },
            failure: function(error) {
              _this.setLoading(false);
              console.log('search error: ' + error);
              dfd.reject();
            }
          });
          return dfd.promise();
        };
        $.when(getCurrentLocation(), search()).done(function(currentLocation, searchData) {
          searchData.distance = locationService.calculateDistance(currentLocation, searchData.geometry.location);
          _this.collection.reset([searchData]);
          _this.mapView.setLocation(searchData.geometry.location);
          if (callback && _.isFunction(callback)) {
            callback();
          }
          return _this.setLoading(false);
        });
      },
      /*
      * Toggles loading mode of this view
      * @param {Boolean} isLoading a flag to specify loading mode or not
      */

      setLoading: function(isLoading) {
        this.$('#search-result-container').toggleClass('loading', isLoading);
      },
      /*
      * Click event handler for [History] button
      */

      onHistoryButtonClicked: function() {}
    });
  });

}).call(this);
